#define SECP256K1_B 7

#define SECP256K1_P0 0xfffffc2f
#define SECP256K1_P1 0xfffffffe
#define SECP256K1_P2 0xffffffff
#define SECP256K1_P3 0xffffffff
#define SECP256K1_P4 0xffffffff
#define SECP256K1_P5 0xffffffff
#define SECP256K1_P6 0xffffffff
#define SECP256K1_P7 0xffffffff

#define SECPK256K_VALUES                                                       \
  SECP256K1_P0, SECP256K1_P1, SECP256K1_P2, SECP256K1_P3, SECP256K1_P4,        \
      SECP256K1_P5, SECP256K1_P6, SECP256K1_P7

__constant uint secpk256PreComputed[] = {385357720, 1509065051, 768485593, 43777243, 3464956679, 1436574357, 4191992748, 2042521214, 4212184248, 2621952143, 2793755673, 4246189128, 235997352, 1571093500, 648266853, 1211816567, 82782071, 1673015151, 1501211622, 48778167, 4058969943, 2723873795, 3646700442, 3083150728, 3168810745, 2248274195, 2205129136, 3039938629, 4171059753, 1228164997, 2455290640, 4180707841, 2226710130, 1824128373, 885138203, 1694542233, 708309846, 266549222, 1663952916, 948927247, 2068256189, 2470838921, 3409829092, 2600425062, 3586657449, 4028418073, 2631014379, 3346040048, 2990600164, 3416839529, 3697384119, 3901457597, 173822248, 1437902629, 436674707, 797695565, 2796315350, 3702029626, 2869782592, 4152895259, 2798240806, 3571165661, 921035734, 3635159590, 1498650969, 592937668, 1425184703, 142072036, 1496726489, 723801634, 3373931561, 659807705, 3401906620, 3911966189, 53535644, 1027709822, 4075452942, 2744709989, 1851634922, 1555951716, 141714650, 2768774696, 335407029, 2819870904, 2249872603, 2736229741, 3123009888, 1793837632, 4153251669, 1526192598, 3959560266, 1475096391, 2045094692, 1558737554, 1171957407, 2501129663, 4230466750, 3277787405, 1280829204, 3768030871, 2673187517, 162338698, 4039636563, 2899608802, 3327106103, 97265194, 929009167, 2916649124, 1983603177, 1681394033, 2963790333, 3425929505, 967860216, 4197702100, 3365958128, 1378318171, 2311364118, 2613573262, 1331176962, 869037790, 1570769099, 3152811913, 3854661777, 1447663627, 1892047532, 1593058411, 1487487262, 2001397752, 3377710619, 807236809, 3757692584, 925741538, 3619140453, 38002006, 3949682201, 3649347634, 917255700, 3487730485, 537274711, 3369225757, 675826842, 4256965289, 345285094, 645619661, 423647912, 3740131215, 1628330189, 2960522182, 3279193681, 3352416773, 3648333963, 4068963266, 3674467713, 699779922, 1377806623, 974784218, 1707978567, 1971458795, 2374503049, 179343406, 620498606, 3595187372, 2917160672, 3320183077, 2586988728, 2323508500, 1920464246, 4115623889, 3799910414, 1152236792, 1015412638, 837129327, 157283345, 1514560227, 2101602966, 3616689487, 4137839448, 3305430175, 3633763237, 3930107691, 684486127, 2206478018, 2825679526, 1478371442, 157126871, 989537119, 661204058, 364859604, 3610481168, 2088489277, 1469287769, 2816595853, 1244482100, 1726282400, 2042197639, 3952646318, 132828961, 2753625832, 3680991056, 3741182540, 2656496503, 3484522998, 1251328246, 3469866144, 3534306734, 3919032554, 2489536872, 1108454150, 1638469816, 810444296, 3043639049, 825101151, 760660561, 375934741, 1805430423, 3186513145, 943217516, 1953850721, 3622333735, 4033531883, 1146046841, 2481937663, 2544124882, 726573223, 3854605178, 3044067412, 1344706403, 436336140, 1511818771, 3007514683, 932470163, 2246613952, 440361141, 1250899882, 2950260892, 3858631155, 2783148524, 1287452612, 3362497132, 2048353343, 633231829, 2167671535, 1912082545, 496686082, 753087280, 1335097907, 1289556566, 892059466, 3481377164, 1740455307, 1907426204, 1243298606, 2648325663, 3583776805, 1397290292, 840872967, 813589155, 2554511987, 2387541091, 3051668689, 1646641632, 711190490, 2897677003, 3454094328, 1321913407, 3701267165, 4025876265, 3828005087, 1502056740, 36700421, 1798885659, 799150157, 1395359079, 1111205739, 4236781128, 404582636, 1540742528, 3058002227, 694016101, 48107624, 2899607240, 3183761555, 58186167, 3890384659, 2754224767, 1236965068, 3600951194, 4246859671, 4114954004, 1774849239, 3767890658, 641482116, 1726864003, 2871110064, 162846349, 2454202267, 2546676738, 3846845134, 2289636095, 1069604394, 3735204351, 1562027803, 4063537886, 1929473915, 1748289581, 448122160, 2005331200, 3225362901, 559762944, 2732939492, 231429409, 2365493380, 1039042345, 2123984196, 1274418624, 794234388, 2965288786, 2389709615, 3819487015, 3672985387, 2428378197, 2873156898, 4088375078, 1065599536, 2130237184, 3567365288, 2104269032, 2795359818, 1866588122, 1421810396, 206592217, 3229367759, 2164730111, 727602007, 2190698263, 1499607477, 2099439579, 3869488616, 4260528560, 300734953, 3417415568, 2328832215, 106791214, 3293385415, 235824258, 2688091711, 517956037, 235957894, 3380805036, 1992579366, 3459411164, 555328608, 4059142061, 1606875583, 3777011258, 4059009401, 914162259, 2302387929, 835556131, 3739638687, 3530155700, 3055314379, 918716515, 355166547, 3738568787, 3365544143, 3697902852, 1780767734, 269322882, 4250821448, 3494001518, 2335423048, 4050265261, 2336182566, 3267185264, 3760377666, 4025643437, 44145846, 800965777, 1959544247, 244702034, 1958784729, 1027782031, 534589629, 218879653, 4183483775, 200020294, 3457363979, 4266922116, 3229082578, 4254983719, 379060134, 3491439510, 2918096227, 2655619815, 2731480320, 3830805555, 659952902, 2256564061, 3116603633, 803526809, 1376871067, 1639347480, 1563486975, 464161740, 3635014393, 2038403234, 1178363662, 4068111481, 4186059870, 4290246173, 2649457504, 3895773965, 2557284103, 2575397259, 1616632577, 90934345, 989979113, 1337019828, 3261856488, 3969318435, 2175241619, 3841511942, 43461933, 4204031974, 3304988181, 2957947467, 1033110807, 325648860, 2119725676, 453455353, 4251505362, 3632263997, 4264675305, 1230614796, 3702529077, 1512136208, 1946353092, 1095810889, 1657884075, 2209504943, 905274404, 1739278114, 27923241, 1357828315, 2550696473, 2361765904, 2164000445, 2085461376, 3389692890, 2555689181, 4267044054, 2937138980, 1744270822, 1933201391, 2130966850, 2251328367, 1582652463, 1805355842, 743500277, 3288917355, 3730524934, 68102106, 2160462544, 1124849018, 446701398, 3195020523, 2791238988, 2145857392, 652635053, 482722575, 473444415, 3170117301, 3848265896, 1099946772, 1503728307, 2149109903, 3642332242, 3812244720, 3821522880, 4194552059, 2640227248, 2279098116, 1288035476, 2361740596, 2859779636, 1634184532, 2056484269, 575522807, 47487468, 208719403, 3183845025, 2032570438, 156605965, 3970462313, 219037609, 3719443512, 4247479826, 4086247892, 1111122270, 2262396857, 4138361330, 324504982, 4075929686, 2613313481, 1270161221, 2607341392, 3141570243, 1162115705, 2423955152, 3063330124, 3576229081, 557881651, 104097205, 1548881340, 3158525248, 2180867438, 2573660696, 825681401, 4006560037, 3737084668, 4190870089, 2746085955, 1136442047, 2114099857, 1721306599, 3469285894, 288407258, 4172568931, 2267224072, 1249823507, 1382420830, 3907836624, 3928356116, 3052680210, 76771492, 311729306, 3058894122, 3143329636, 1422128047, 1362089514, 2335211952, 2950098242, 1972322113, 3983237013, 1236073172, 1151637659, 2872839248, 2932877781, 1959755343, 1344869053, 2322645182, 4231290228, 4055973553, 236230882, 2283634974, 3594978031, 3611162928, 1860734139, 2012360851, 1729913046, 3197023175, 3648026571, 2529776432, 2611065720, 168306286, 2022094400, 2509173802, 2565053273, 1097944119, 646940724, 1765190863, 1683901575, 4126661009, 2272872895, 1785793493, 2000287024, 3945288475, 2879212986, 1489502324, 1551633358, 3930359934, 3427591353, 4074424721, 1882864695, 437353914, 93906173, 2662726635, 3961860575, 1302459181, 992972205, 3772701851, 2412101624, 3857613380, 4201061122, 1632240660, 333106720, 2992508114, 3301995090, 522265444, 3331380315, 3166324816, 3386565598, 1512139999, 3190104082, 457959675, 1713775099, 1178287519, 452407422, 481523632, 2534022627, 3324174972, 3716555479, 1125204742, 2351524917, 1590964439, 3842558897, 3813443662, 1760944668, 970792323, 578411816, 3169762553, 1943442378, 2704002856, 2576937543, 2737084084, 1126736593, 1805187777, 4282079639, 153300298, 1155821098, 4050616386, 3303218678, 3596065122, 1851575846, 711742402, 3746444249, 332531452, 2183151486, 3470441883, 991747641, 698902172, 2443391449, 3583224893, 548523046, 3962435843, 2111815809, 824525412, 354238929, 916329975, 2900524133, 1562661653, 338762485, 2956274554, 768099683, 3405206567, 413156470, 3274674307, 2518823589, 1599056311, 2783207511, 2753258559, 4013290994, 3410445920, 3881809849, 1020292987, 1776143706, 2695910984, 1511759784, 1541708736, 281676301, 884521375, 1862803744, 608795592, 3414611905, 1151376391, 160931211, 4166848279, 674019718, 637585995, 1518226240, 1259071815, 2875133684, 1522974324, 3453727837, 2794696767, 1405180886, 1092204679, 2776740079, 3035895479, 1419833611, 2771992971, 841239458, 1500270528, 2889786409, 3202762616, 1771627573, 3322062708, 3796860360, 29656709, 3508674748, 864994620, 3622322988, 1983236722, 744201313, 3655823152, 3580905658, 1322238049, 259581655, 1025334873, 155753825, 152790166, 3550765006, 639144142, 714061637, 2972729246, 4035385640, 3269632422, 4139213470, 4142177129, 3210136600, 3248817987, 2043963643, 3086136116, 3740174950, 3686746759, 4079310604, 1968058937, 1012098691, 207460361, 427452765, 602813392, 82463136, 3016560339, 3854410511, 108264326, 3282867628, 4087506933, 3867514530, 3692153903, 4212504159, 1278406956, 440556784, 4186702969, 2446965224, 2682415430, 488412463, 856162406, 2195026160, 4283925916, 1906436458, 3823549712, 2450405365, 1728064244, 2481523777, 2778867769, 932854966, 1086368344, 2744444783, 1506402491, 1844560954, 2566903050, 1813443518, 1516099526, 3362112329, 3208598951, 1550522512, 2788564804, 4031424235, 1287946204, 732127051, 3301749235, 2406689157, 648967128, 90833720, 409684029, 1853917323, 2762446840, 2303801524, 570130576, 541163691, 773276782, 3330078590, 999632178, 2441048996, 1532520454, 1991165771, 3724836719, 3753803604, 3521690513, 964888705, 3295335117, 1289786943, 444801394, 3073890761, 1413670610, 4106112882, 1154057569, 3112660197, 3751637158, 4072285207, 397984860, 552574370, 2975277607, 1573100874, 1602628472, 3628952781, 1441476015, 222681112, 3896982434, 3742392925, 1319689688, 2721866421, 2692338823, 666014514, 2853491280, 885944643, 1575373919, 2225002649, 2874299727, 3588022520, 1232906261, 1012000890, 1591565506, 1939449960, 3452372651, 3514444037, 3241961152, 818453200, 1642647232, 3155432198, 4021197965, 2355516359, 842594643, 780523258, 1053006143, 3476514095, 2652320063, 1139535097, 273769330, 2220969914, 1915565615, 3277173114, 2057567137, 679386743, 3658677762, 3058133040, 688363714, 1100234362, 1828731645, 3676971796, 1529462932, 4154126941, 2559377596, 3443787297, 3817711469, 3194731957, 2466235649, 617995499, 2765504363, 140840354, 1735589699, 851179998, 477255826, 4093983557, 1658838734, 3814729075, 3442038063, 2706418745, 88560879, 2514089395, 2939961914, 1234164166, 3157257709, 1738626433, 3368901286, 4082957120, 2593370342, 837495668, 4186587096, 3060802153, 1137709585, 2556340862, 926066009, 212010175, 1701596953, 3457471627, 108380199, 3632538778, 2368728400, 1842321631, 112944818, 2579441481, 3435831948, 3509905221, 1986902820, 3417069974, 747786135, 4194750173, 2539145829, 2161785016, 2378991737, 3939231203, 1951076690, 877896345, 3547181159, 100217122, 1755821466, 2133182279, 1915975558, 355736092, 2343890605, 421183038, 3465733734, 1817799256, 1173861455, 931460118, 2719119299, 2358539675, 1507587183, 1244692334, 3630047596, 2031712652, 1120826266, 1686309280, 256812750, 392150064, 3308563780, 3050273985, 664919698, 2263254643, 3174141029, 2608658015, 4038154545, 3902817231, 986403515, 2365425592, 3056453121, 446031676, 3714350705, 1961469096, 811493662, 272385335, 4047166101, 3673518909, 125321627, 1786102359, 1766449690, 137633586, 1673481160, 1323388390, 3778549684, 621447410, 4169645667, 2508864936, 2528517605, 4157333709, 2621486135, 2971578905, 516417611, 1518883372, 1216696321, 1857740726, 3659033024, 3315386956, 1833002914, 243977936, 2002040058, 2215732130, 933530455, 191675589, 2367573557, 807450874, 575379068, 1315347842, 820592262, 2079234189, 3361436839, 4103291706, 1927393738, 3487516421, 3719588227, 2979619453, 3474375033, 3794150681, 2793573529, 3732947410, 25530261, 1790900695, 2855826644, 1502666824, 2492320479, 1397216638, 3417975982, 3173970386, 3750843631, 615627813, 3587344946, 938927511, 3834749989, 2897749681, 876991312, 1120996909, 544123664, 3679339482, 707622349, 3356039784, 460217306, 1031567275, 1882360458, 2886466069, 4213329141, 2181229623, 2311566479, 1355246614, 2036482372, 2646094903, 1622123954, 520399959, 307264005, 871329643, 224141249, 3305092214, 269181198, 1648871416, 2672843340, 3774567336, 3987703290, 3423637652, 4070826046, 989875081, 4025786097, 938231754, 2967275601, 632849531, 1511430002, 1155077448, 2975536646, 882264916, 890505336, 3727242001, 2122126752, 365049739, 1614407548, 2390829052, 2383827652, 90309956, 4010474418, 567724318, 2172840542, 3929917556, 2680559747, 1904138243, 1911139643, 4204657339, 284492877, 2069003951, 1117011263, 2381809588, 2481539051, 3716924745, 3348947657, 1799896651, 3553374381, 1324212388, 2947763632, 2419426864, 1009439842, 2408908974, 2311449022, 3626444685, 2335672866, 2970753931, 1347203662, 1875540431, 3285527453, 1886058321, 1983518273, 668522610, 1959294429, 4102321680, 964016655, 3105093193, 724140605, 3220168843, 3457972476, 2155030624, 371513415, 67601781, 3423003300, 673965256, 2305325301, 1826215114, 152323212, 3067777086, 1751457017, 4227364538, 871963994, 3621002039, 1989641994, 2468752181, 4142644083, 1227190209, 2543510278, 1606819028, 1844950269, 1525811162, 1368541003, 870722200, 1761790294, 2840963234, 1933371405, 499509789, 3309728700, 538854776, 1042217184, 2377776334, 1213877643, 3535462269, 4114831915, 3795456530, 985238594, 3756112519, 3252750111, 1917190961, 3081089652, 759505026, 180135380, 3088843868, 4012215802, 561112729, 2305213705, 3151213727, 3474594867, 1419006052, 366560274, 4024698637, 4231511017, 3468674693, 1128792250, 1941455223, 888476539, 1766211186, 3580801803, 270267682, 63456277, 826292602, 3166175045, 2353512072, 3406490756, 2528756109, 714165492, 3497097536, 2886960537, 2636876458, 471941500, 1558646055, 3054637934, 3969771125, 2714828018, 3247941161, 421604665, 1081144277, 1679057573, 815163378, 3001616183, 3166020554, 3990323024, 1047025158, 3873362629, 3213823018, 2615909722, 3479803917, 1293351112, 1128946741, 304644271, 481520000, 3351918387, 3894696966, 2811280094, 1602542569, 1468055667, 3232730316, 3794779669, 2100419078, 3829204695, 1231321499, 2743240981, 2673058215, 2293510310, 2908542476, 176511915, 2194547241, 465762599, 3063645796, 1551726314, 1621909080, 2001456985, 1386424819, 4118455380, 1188014515, 1074349346, 1191504551, 1768119865, 3239403359, 249640051, 2556487906, 823169501, 678265716, 3179344049, 1341056645, 2266940838, 2294310960, 4291948615, 2278682703, 1725654383, 3616700603, 1115623245, 2953910650, 2028026457, 2000656335, 3018680, 2016284592, 2569312912, 784522207, 409457699, 1519599736, 2285447348, 3555109924, 3004957762, 3540106889, 885128452, 3128142830, 3308394583, 3028763709, 3581877486, 806830390, 1421690615, 3917159257, 155272837, 1166823489, 986572711, 1266203586, 713089809, 3488136905, 2873276680, 377808038, 4139694458, 77303139, 3425328747, 3167783679, 2366895019, 1434367018, 471129691, 1800695836, 4061784669, 1074226897, 3636631082, 129138616, 4105211196, 1288500913, 4147835988, 3896328368, 1287215447, 3220739422, 658336212, 4165828679, 189756099, 3006466382, 147131307, 398638927, 3007751848, 1772139592, 1916178724, 3165005576, 1413108880, 2403720742, 2985722843, 1957231530, 3619189775, 3936639291, 1092485909, 3552594355, 4279622494, 2060743038, 3774943027, 685361454, 4202141313, 358327028, 3202481385, 742372940, 15344801, 2234224257, 520024268, 3609605841, 92825982, 447227071, 2682573577, 2883425320, 2908474674, 3550688094, 4168055960, 797929230, 852696098, 1177425505, 294458552, 1864821089, 778939550, 364503514, 2630696313, 2300663523, 1596994293, 3117540814, 4000508742, 2430146206, 3516027745, 3930463781, 1664270982, 1994303772, 2697973002, 3246606261, 873432779, 3583349444, 2274613116, 1570255338, 1896110613, 2437591846, 1952576369, 3423154166, 3013101491, 211316390, 787357685, 178537044, 3420314798, 2341912256, 2394995235, 871812153, 1281865803, 4083650905, 3507609610, 4116430251, 874652497, 1953055039, 1899972060, 3618812630, 678860986, 1046955325, 1836149548, 2855805034, 1949657637, 502367744, 3993475803, 3961293854, 3953837177, 4031532581, 2756090010, 3972397558, 1281308640, 2950938204, 2378318122, 333672465, 341130117, 263434714, 1538877285, 322569737, 3013658655, 1344029091, 1916649173, 3130894005, 738035222, 2269945287, 3864912689, 786833655, 1182472240, 1206682608, 384603108, 632317773, 2519103374, 1357158163, 2639796330, 3394765987, 3504915111, 241367872, 1581658389, 3662648546, 1775863920, 2937809132, 1655170965, 900201308, 790052184, 4053599423, 2713308906, 3577200025, 2243518565, 4186663588, 3632617623, 2946960235, 949453456, 3259365104, 3936745856, 1323042780, 2977972482, 2121180799, 3615786653, 479807012, 430254137, 690761224, 4133444926, 2971923539, 1316994812, 2173786496, 679180642, 3815160283, 3864713158, 3604206071, 161522369, 899981137, 2842446699, 1901147182, 1487799431, 167920537, 1764680081, 1414185266, 126653447, 2493767092, 1656124913, 1007045924, 4196384088, 1402625640, 3577759637, 1777048453, 4091556241, 1801199227, 2638842381, 3287921371, 98583207, 2892341655, 717207658, 2517918842, 203411054, 1881692069, 1919252697, 2054145672, 30263470, 1125837312, 383572024, 430024560, 1229933538, 2282575404, 1442099249, 3613912430, 4180004400, 1580644906, 968523527, 2458101235, 1109666454, 2012390915, 2852868045, 681054865, 114962895, 2714322389, 3326443768, 1836866060, 3185300841, 1545595317, 3209436774, 1492821774, 3531739626, 340698441, 1808265973, 229038188, 2778245123, 763776619, 268594621, 1530263658, 603743158, 1081309932, 2118863473, 2223123504, 541810031, 3531189700, 4026372673, 2764703637, 3691224137, 3213657363, 2176103822, 2071843791, 3753157264, 1482250647, 1304091710, 307694104, 546243087, 767471596, 152645471, 1522215773, 3289978422, 1492818195, 3977701739, 255115200, 3586849093, 681068937, 1238517171, 3490217722, 82920273, 2802148124, 317265555, 4039852095, 708118202, 3613898358, 3056450124, 804749573, 4212047022, 343156865, 3838261845, 3768806095, 2460147922, 3657677915, 1517438468, 2777086535, 2216517731, 445473108, 3886247392, 1951143580, 3861209814, 3344184984, 419756449, 2617661928, 121137141, 3849493211, 408719902, 2343823715, 433757481, 950782311, 3875210846, 1677305367, 4173830154};



#define SECP256K1_PRE_COMPUTED_XY_SIZE 1536
#define SECP256K1_NAF_SIZE 33

#define is_zero(n)                                                             \
  (!n[8] && !n[7] && !n[6] && !n[5] && !n[4] && !n[3] && !n[2] && !n[1] &&     \
   !n[0])

#define shift_first(aElem, lastValue)                                          \
  (aElem)[0] = (aElem)[0] >> 1 | (aElem)[1] << 31;                             \
  (aElem)[1] = (aElem)[1] >> 1 | (aElem)[2] << 31;                             \
  (aElem)[2] = (aElem)[2] >> 1 | (aElem)[3] << 31;                             \
  (aElem)[3] = (aElem)[3] >> 1 | (aElem)[4] << 31;                             \
  (aElem)[4] = (aElem)[4] >> 1 | (aElem)[5] << 31;                             \
  (aElem)[5] = (aElem)[5] >> 1 | (aElem)[6] << 31;                             \
  (aElem)[6] = (aElem)[6] >> 1 | (aElem)[7] << 31;                             \
  (aElem)[7] = lastValue;

#define copy_eight(a, b)                                                       \
  (a)[0] = (b)[0], (a)[1] = (b)[1], (a)[2] = (b)[2], (a)[3] = (b)[3],          \
  (a)[4] = (b)[4], (a)[5] = (b)[5], (a)[6] = (b)[6], (a)[7] = (b)[7];

#define is_even(x) !((x)[0] & 1)

unsigned int
sub(unsigned int * __restrict__ r,
    const unsigned int * __restrict__ a,
    const unsigned int * __restrict__ b)
{
    unsigned int a0=a[0], a1=a[1], a2=a[2], a3=a[3];
    unsigned int a4=a[4], a5=a[5], a6=a[6], a7=a[7];
    unsigned int b0=b[0], b1=b[1], b2=b[2], b3=b[3];
    unsigned int b4=b[4], b5=b[5], b6=b[6], b7=b[7];

    unsigned int d0,d1,d2,d3,d4,d5,d6,d7;
    unsigned int no_borrow; 

    asm volatile (
        "{\n\t"
        "sub.cc.u32      %0,  %9,  %17;\n\t"
        "subc.cc.u32     %1,  %10, %18;\n\t"
        "subc.cc.u32     %2,  %11, %19;\n\t"
        "subc.cc.u32     %3,  %12, %20;\n\t"
        "subc.cc.u32     %4,  %13, %21;\n\t"
        "subc.cc.u32     %5,  %14, %22;\n\t"
        "subc.cc.u32     %6,  %15, %23;\n\t"
        "subc.cc.u32     %7,  %16, %24;\n\t"
        "addc.u32        %8,  0,   0;\n\t"
        "}\n"
        : "=r"(d0), "=r"(d1), "=r"(d2), "=r"(d3),
          "=r"(d4), "=r"(d5), "=r"(d6), "=r"(d7),
          "=r"(no_borrow)
        : "r"(a0), "r"(a1), "r"(a2), "r"(a3),
          "r"(a4), "r"(a5), "r"(a6), "r"(a7),
          "r"(b0), "r"(b1), "r"(b2), "r"(b3),
          "r"(b4), "r"(b5), "r"(b6), "r"(b7)
    );

    r[0]=d0; r[1]=d1; r[2]=d2; r[3]=d3;
    r[4]=d4; r[5]=d5; r[6]=d6; r[7]=d7;
    return 1u - no_borrow;
}

uint add(uint *r, const uint *a, const uint *b) {
  uint c = 0, t;
  t = a[0] + b[0] + c;
  c = (t != a[0]) ? (t < a[0]) : c;
  r[0] = t;
  t = a[1] + b[1] + c;
  c = (t != a[1]) ? (t < a[1]) : c;
  r[1] = t;
  t = a[2] + b[2] + c;
  c = (t != a[2]) ? (t < a[2]) : c;
  r[2] = t;
  t = a[3] + b[3] + c;
  c = (t != a[3]) ? (t < a[3]) : c;
  r[3] = t;
  t = a[4] + b[4] + c;
  c = (t != a[4]) ? (t < a[4]) : c;
  r[4] = t;
  t = a[5] + b[5] + c;
  c = (t != a[5]) ? (t < a[5]) : c;
  r[5] = t;
  t = a[6] + b[6] + c;
  c = (t != a[6]) ? (t < a[6]) : c;
  r[6] = t;
  t = a[7] + b[7] + c;
  c = (t != a[7]) ? (t < a[7]) : c;
  r[7] = t;
  return c;
}

inline bool is_less(const uint *a, const uint *b) {
  for (int i = 7; i >= 0; i--) {
    if (a[i] < b[i])
      return true;
    if (a[i] > b[i])
      return false;
  }
  return false;
}
inline void shift_and_add(uint *x, uint *y, const uint *p) {
  shift_first(x, x[7] >> 1);
  uint c = 0;
  if (!is_even(y)) {
    c = add(y, y, p);
  }
  shift_first(y, y[7] >> 1 | c << 31);
}

inline void sub_and_shift(uint *x, const uint *y, uint *z, const uint *w,
                          const uint *p) {
  sub(x, x, y);
  shift_first(x, x[7] >> 1);
  if (is_less(z, w)) {
    add(z, z, p);
  }
  sub(z, z, w);

  if (!is_even(z)) {
    uint c = add(z, z, p);
    shift_first(z, z[7] >> 1 | c << 31);
  } else {
    shift_first(z, z[7] >> 1);
  }
}

inline bool is_greater(const uint *a, const uint *b) {
  for (int i = 7; i >= 0; i--) {
    if (a[i] != b[i])
      return (a[i] > b[i]);
  }
  return false;
}

inline bool arrays_equal(const uint *a, const uint *b) {
  #pragma unroll
  for (int i = 0; i < 8; i++) {
    if (a[i] != b[i])
      return false;
  }
  return true;
}
inline void sub_mod(uint *r, const uint *a, const uint *b) {
  const uint c = sub(r, a, b);
  if (c) {
    uint t[8] = {SECPK256K_VALUES};
    add(r, r, t);
  }
}

inline void add_mod(uint *r, const uint *a, const uint *b) {
  uint t[8] = {SECPK256K_VALUES};
  if (!add(r, a, b)) {
    for (int i = 7; i >= 0; i--) {
      if (r[i] < t[i]) {
        return;
      }
      if (r[i] > t[i]) {
        break;
      }
    }
  }
  sub(r, r, t);
}

void mul_mod(uint *r, const uint *a, const uint *b) {
  uint t[16] = {0};
  uint t0 = 0;
  uint t1 = 0;
  uint c = 0;
  for (uint i = 0; i < 8; i++) {
    for (uint j = 0; j <= i; j++) {
      ulong p = ((ulong)a[j]) * b[i - j];
      ulong d = ((ulong)t1) << 32 | t0;

      d += p;
      t0 = (uint)d;
      t1 = d >> 32;
      c += d < p;
    }

    t[i] = t0;
    t0 = t1;
    t1 = c;
    c = 0;
  }

  for (uint i = 8; i < 15; i++) {
    for (uint j = i - 7; j < 8; j++) {
      ulong p = ((ulong)a[j]) * b[i - j];
      ulong d = ((ulong)t1) << 32 | t0;
      d += p;
      t0 = (uint)d;
      t1 = d >> 32;
      c += d < p;
    }
    t[i] = t0;
    t0 = t1;
    t1 = c;
    c = 0;
  }

  t[15] = t0;
  uint tmp[16] = {0};
  for (uint i = 0, j = 8; i < 8; i++, j++) {
    ulong p = ((ulong)0x03d1) * t[j] + c;
    tmp[i] = (uint)p;
    c = p >> 32;
  }
  tmp[8] = c;
  c = add(tmp + 1, tmp + 1, t + 8);
  tmp[9] = c;
  c = add(r, t, tmp);
  uint c2 = 0;
  for (uint i = 0, j = 8; i < 8; i++, j++) {
    ulong p = ((ulong)0x3d1) * tmp[j] + c2;
    t[i] = (uint)p;
    c2 = p >> 32;
  }

  t[8] = c2;
  c2 = add(t + 1, t + 1, tmp + 8);
  t[9] = c2;

  uint h[8] = {SECPK256K_VALUES};
  for (uint i = c + add(r, r, t); i > 0; i--) {
    sub(r, r, h);
  }
  for (int i = 7; i >= 0; i--) {
    if (r[i] < h[i])
      break;
    if (r[i] > h[i]) {
      sub(r, r, h);
      break;
    }
  }
}

void inv_mod(uint *a) {
  uint t0[8] = {a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]};
  uint p[8] = {SECPK256K_VALUES};
  uint t1[8] = {SECPK256K_VALUES};
  uint t2[8] = {0x00000001, 0, 0, 0, 0, 0, 0, 0};
  uint t3[8] = {0};

  while (!arrays_equal(t0, t1)) {
    if (is_even(t0)) {
      shift_and_add(t0, t2, p);
    } else if (is_even(t1)) {
      shift_and_add(t1, t3, p);
    } else {
      if (is_greater(t0, t1)) {
        sub_and_shift(t0, t1, t2, t3, p);
      } else {
        sub_and_shift(t1, t0, t3, t2, p);
      }
    }
  }
  copy_eight(a, t2);
}

void point_double(uint *x, uint *y, uint *z) {

  uint t1[8];
  uint t2[8];
  uint t3[8] = {z[0], z[1], z[2], z[3], z[4], z[5], z[6], z[7]};
  uint t4[8];
  uint t5[8];
  uint t6[8];
  copy_eight(t2, y);
  mul_mod(t4, x, x);
  mul_mod(t5, y, y);
  mul_mod(t3, y, z);
  mul_mod(t1, x, t5);
  mul_mod(t5, t5, t5);
  add_mod(t2, t4, t4);
  add_mod(t4, t4, t2);
  uint c = 0;
  if (t4[0] & 1) {
    uint t[8] = {SECPK256K_VALUES};
    c = add(t4, t4, t);
  }
  shift_first(t4, t4[7] >> 1 | c << 31);
  mul_mod(t6, t4, t4);
  add_mod(t2, t1, t1);
  sub_mod(t6, t6, t2);
  sub_mod(t1, t1, t6);
  mul_mod(t4, t4, t1);
  sub_mod(t1, t4, t5);

  copy_eight(x, t6);
  copy_eight(y, t1);
  copy_eight(z, t3);
}

void point_add(uint *x1, uint *y1, uint *z1, __constant uint *x2,
               __constant uint *y2) // z2 = 1
{

  uint t1[8];
  uint t2[8];
  uint t3[8];
  uint t4[8];
  uint t5[8];
  uint t6[8];
  uint t7[8];
  uint t8[8];
  uint t9[8];

  copy_eight(t1, x1);
  copy_eight(t2, y1);
  copy_eight(t3, z1);
  copy_eight(t4, x2);
  copy_eight(t5, y2);

  mul_mod(t6, t3, t3); // t6 = t3^2

  mul_mod(t7, t6, t3); // t7 = t6*t3
  mul_mod(t6, t6, t4); // t6 = t6*t4
  mul_mod(t7, t7, t5); // t7 = t7*t5

  sub_mod(t6, t6, t1); // t6 = t6-t1
  sub_mod(t7, t7, t2); // t7 = t7-t2

  mul_mod(t8, t3, t6); // t8 = t3*t6
  mul_mod(t4, t6, t6); // t4 = t6^2
  mul_mod(t9, t4, t6); // t9 = t4*t6
  mul_mod(t4, t4, t1); // t4 = t4*t1

  t6[7] = t4[7] << 1 | t4[6] >> 31;
  t6[6] = t4[6] << 1 | t4[5] >> 31;
  t6[5] = t4[5] << 1 | t4[4] >> 31;
  t6[4] = t4[4] << 1 | t4[3] >> 31;
  t6[3] = t4[3] << 1 | t4[2] >> 31;
  t6[2] = t4[2] << 1 | t4[1] >> 31;
  t6[1] = t4[1] << 1 | t4[0] >> 31;
  t6[0] = t4[0] << 1;

  if (t4[7] & 0x80000000) {
    uint a[8] = {0x000003d1, 1, 0, 0, 0, 0, 0, 0};
    add(t6, t6, a);
  }

  mul_mod(t5, t7, t7); // t5 = t7*t7
  sub_mod(t5, t5, t6); // t5 = t5-t6
  sub_mod(t5, t5, t9); // t5 = t5-t9
  sub_mod(t4, t4, t5); // t4 = t4-t5
  mul_mod(t4, t4, t7); // t4 = t4*t7
  mul_mod(t9, t9, t2); // t9 = t9*t2
  sub_mod(t9, t4, t9); // t9 = t4-t9

  copy_eight(x1, t5);
  copy_eight(y1, t9);
  copy_eight(z1, t8);
}
uint msb_point(uint *n) {
  uint msb = 0;
  for (int i = 1; i <= 8; i++) {  // Start from MSB (i=1 = high limb) to LSB (i=8)
    if (n[i]) {
      msb = (9 - i) * 32 + 31 - __builtin_clz(n[i]);  // Corrected for little-endian (n[1] MSB)
      break;
    }
  }
  return msb;
}
int convert_to_window_naf(uint *naf, __global uint *k) {
  int loop_start = 0;
  uint n[9] = {0, k[7], k[6], k[5], k[4], k[3], k[2], k[1], k[0]};
  uint msb = msb_point(n);
  for (int i = 0; i <= msb; i++) {
    if (n[8] & 1) {
      int diff = n[8] & 0xff;
      int val = diff;
      if (diff >= 0x80) {
        diff -= 0x100;
        val = 0x101 - val;
      }
      naf[i >> 2] |= val << ((i & 3) << 3);  
      uint t = n[8];
      n[8] -= diff;
      uint k_idx = 8;
      while (k_idx > 0 && ((diff > 0 && n[k_idx] > t) || (diff < 0 && t > n[k_idx]))) {
        k_idx--;
        t = n[k_idx];
        n[k_idx] += (diff > 0) ? -1 : 1;
      }
      loop_start = i;
    }
    for (int j = 8; j > 0; j--) {
      n[j] = (n[j] >> 1) | (n[j - 1] << 31);
    }
    n[0] >>= 1;
    if (is_zero(n)) {
      break;
    }
  }
  return loop_start;
}
__kernel void point_mul_xy(__global uint *x1, __global uint *y1, __global uint *k) {
  uint g = get_global_id(0)*8;
  uint naf[SECP256K1_NAF_SIZE] = {0};
  uint y[8] = {0};
  uint x[8] = {0};
  int loop_start = convert_to_window_naf(naf, k+g);
  const uint multiplier = (naf[loop_start >> 2] >> ((loop_start & 3) << 3)) & 0xff;
  const uint odd = multiplier & 1;
  const uint x_pos = ((multiplier - 1 + odd) >> 1) * 24;
  const uint y_pos = odd ? (x_pos + 8) : (x_pos + 16);
  copy_eight(x, secpk256PreComputed + x_pos);
  copy_eight(y, secpk256PreComputed + y_pos);
  uint z1[8] = {1, 0, 0, 0, 0, 0, 0, 0};
  for (int pos = loop_start - 1; pos >= 0; pos--) {
    point_double(x, y, z1);
    const uint multiplier = (naf[pos >> 2] >> ((pos & 3) << 3)) & 0xff;  // Updated for 8-bit
    if (multiplier) {
      const uint odd = multiplier & 1;
      const uint x_pos = ((multiplier - 1 + odd) >> 1) * 24;
      const uint y_pos = odd ? (x_pos + 8) : (x_pos + 16);
      point_add(x, y, z1, secpk256PreComputed + x_pos,secpk256PreComputed + y_pos);
    }
  }
  inv_mod(z1);
  uint z2[8];
  mul_mod(z2, z1, z1);
  mul_mod(x, x, z2);
  mul_mod(z1, z2, z1);
  mul_mod(y, y, z1);
  copy_eight(x1+g, x);
  copy_eight(y1+g, y);
}__kernel void point_mul_xy_seq(__global uint *x1, __global uint *y1, __global ulong *from, __global ulong *size, __global ulong *results) {
  // ... rest of code .
  uint g = get_global_id(0);

  uint naf[SECP256K1_NAF_SIZE] = {0};
  uint y[8] = {0};
  uint x[8] = {0};
  int loop_start = convert_to_window_naf(naf, from+g);
  const uint multiplier = (naf[loop_start >> 2] >> ((loop_start & 3) << 3)) & 0xff;
  const uint odd = multiplier & 1;
  const uint x_pos = ((multiplier - 1 + odd) >> 1) * 24;
  const uint y_pos = odd ? (x_pos + 8) : (x_pos + 16);
  copy_eight(x, secpk256PreComputed + x_pos);
  copy_eight(y, secpk256PreComputed + y_pos);
  uint z1[8] = {1, 0, 0, 0, 0, 0, 0, 0};
  for (int pos = loop_start - 1; pos >= 0; pos--) {
    point_double(x, y, z1);
    const uint multiplier = (naf[pos >> 2] >> ((pos & 3) << 3)) & 0xff;  // Updated for 8-bit
    if (multiplier) {
      const uint odd = multiplier & 1;
      const uint x_pos = ((multiplier - 1 + odd) >> 1) * 24;
      const uint y_pos = odd ? (x_pos + 8) : (x_pos + 16);
      point_add(x, y, z1, secpk256PreComputed + x_pos,secpk256PreComputed + y_pos);
    }
  }
  inv_mod(z1);
  uint z2[8];
  mul_mod(z2, z1, z1);
  mul_mod(x, x, z2);
  mul_mod(z1, z2, z1);
  mul_mod(y, y, z1);
  copy_eight(x1+g, x);
  //copy_eight(y1+g, y);
  ulong num_seq = (ulong) size[0];
  uint base_offset = g;
  #pragma unroll

  for(ulong i = 0; i < num_seq; i++) {    
    point_add(x, y, z1, secpk256PreComputed, secpk256PreComputed + 8); 
    uint offset = base_offset + i * 8 * 2; 
    copy_eight(x1 + i, x);
    //copy_eight(y1 + i + 8, y);

  }
}
